           *******************************************************
                            Listing of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 28-MAY-2014 16:19:30.43

Line
   1  with Measures; 
   2  with Heart;
   3  
   4  -- This package simulates a simple impulse generator for an ICD. It is
   5  --  provided with an amount to discharge, and provides this amount to
   6  --  a heart in the next 'tick'.
   7  --# inherit Measures,
   8  --#         RandomNumber,
   9  --#         Heart;
  10  package ImpulseGenerator is
  11     
  12     -- The generator type
  13     type GeneratorType is
  14        record
  15  	 -- The current impulse; to be administered to the heart at
  16  	 --  the next clock tick
  17  	 Impulse : Measures.Joules;  
  18     
  19  	 -- Indicates whether the generator has been turned on.
  20  	 IsOn : Boolean;
  21        end record;
  22     
  23     -- Create and initialise a new generator.
  24     procedure Init(Generator : out GeneratorType);
  25     --# derives Generator from ;
  26     --# post Generator.IsOn = False and Generator.Impulse = 0;
  27     
  28     -- Turn on the generator, but do not administer any impulse yet.
  29     procedure On(Generator : in out GeneratorType);
  30     --# derives Generator from Generator;
  31     --# post Generator.IsOn;
  32     
  33     -- Turn off the generator;
  34     procedure Off(Generator : in out GeneratorType);
  35     --# derives Generator from Generator;
  36     --# post not Generator.IsOn;
  37     
  38     -- Query the status of the generator (on/off)
  39     function IsOn(Generator : in GeneratorType) return Boolean;
  40     --# return Generator.IsOn;
  41     
  42     -- Set the impulse to be administered
  43     procedure SetImpulse(Generator : in out GeneratorType; 
  44  			J : in Measures.Joules);
  45     --# derives Generator from Generator, J;
  46     --# post (Generator.IsOn -> Generator.Impulse = J) and
  47     --#      (not Generator.IsOn -> Generator = Generator~);
  48     
  49     -- Tick the clock, providing an impulse to the heart.
  50     procedure Tick(Generator : in GeneratorType; 
  51  		  Hrt : in out Heart.HeartType);
  52     --# derives Hrt from Generator, Hrt;
  53     --# post not Generator.IsOn -> Hrt = Hrt~;
  54     
  55  end ImpulseGenerator;


--End of file--------------------------------------------------
