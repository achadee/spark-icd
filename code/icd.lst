           *******************************************************
                            Listing of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 01-JUN-2014 22:28:21.76

Line
   1  with Measures;
   2  with HRM;
   3  with ImpulseGenerator;
   4  --with Ada.Text_IO;
   5  
   6  package body ICD is
   7  
   8     NoShock : constant Measures.Joules := 0;
   9  
  10     procedure Init(Computer : out ICDType) is
  11     begin
  12          Computer.IsOn := False;
  13  
  14          Computer.UpperBound := 130;
  15          Computer.TicksToNextShock := 600 / (Computer.UpperBound + ProjectedRate);
  16          
  17          Computer.history_avarage := 0;
  18          Computer.history_variance := 0;
  19  
  20          Computer.state := normal;
  21  
  22          
  23          Computer.TickCount := 0;
  24          Computer.Count := 0;
  25  
  26          Computer.Rate := Measures.BPM'First;
  27          Computer.heartRateHistory1 := Measures.BPM'First;
  28          Computer.heartRateHistory2 := Measures.BPM'First;
  29          Computer.heartRateHistory3 := Measures.BPM'First;
  30          Computer.heartRateHistory4 := Measures.BPM'First;
  31          Computer.heartRateHistory5 := Measures.BPM'First;
  32          Computer.heartRateHistory6 := Measures.BPM'First;
  33     end Init;

+++        Flow analysis of subprogram Init performed: no 
           errors found.

  34  
  35     procedure On(Computer: in out ICDType) is
  36     begin
  37        Computer.IsOn := True;
  38     end On;

+++        Flow analysis of subprogram On performed: no 
           errors found.

  39  
  40     procedure Off(Computer: in out ICDType) is
  41     begin
  42        Computer.IsOn := False;
  43     end Off;

+++        Flow analysis of subprogram Off performed: no 
           errors found.

  44  
  45     procedure addRateToHistory(Computer : in out ICDType) is
  46     begin
  47            Computer.heartRateHistory1 := Computer.heartRateHistory2;
  48            Computer.heartRateHistory2 := Computer.heartRateHistory3;
  49            Computer.heartRateHistory3 := Computer.heartRateHistory4;
  50            Computer.heartRateHistory4 := Computer.heartRateHistory5;
  51            Computer.heartRateHistory5 := Computer.heartRateHistory6;
  52            Computer.heartRateHistory6 := Computer.rate;
  53     end addRateToHistory;

+++        Flow analysis of subprogram addRateToHistory 
           performed: no errors found.

  54     
  55     procedure Set_Impulse(Computer : in out ICDType; Shock: in out ImpulseGenerator.GeneratorType) is
  56     begin
  57        -- self contained set impulse
  58        --Ada.Text_IO.Put_Line(Integer'Image(Computer.TickCount));
  59        if Computer.state = fib and Shock.IsOn then
  60           --Ada.Text_IO.Put_Line("BIG SHOCK");
  61           ImpulseGenerator.SetImpulse(Shock, FibShock);
  62        elsif Computer.state = tar and Computer.count > 0 
  63              and Computer.TickCount = 0 then
  64           --Ada.Text_IO.Put_Line("SHOCK");
  65           ImpulseGenerator.SetImpulse(Shock, TarShock);
  66           Computer.count := Computer.count - 1;
  67           Computer.TickCount := Computer.TicksToNextShock;
  68  
  69        elsif Computer.state = normal then
  70           ImpulseGenerator.SetImpulse(Shock, 0);
  71        end if;
  72     end Set_Impulse;

+++        Flow analysis of subprogram Set_Impulse 
           performed: no errors found.

  73  
  74     procedure CalculateAvarage(Computer : in out ICDType) is
  75     begin
  76  
  77        Computer.history_avarage := (((((Computer.heartRateHistory1 +
  78                                    Computer.heartRateHistory2) +
  79                                    Computer.heartRateHistory3) +
  80                                    Computer.heartRateHistory4) +
  81                                    Computer.heartRateHistory5) +
  82                                    Computer.heartRateHistory6)/ 6;
  83     end CalculateAvarage;

+++        Flow analysis of subprogram CalculateAvarage 
           performed: no errors found.

  84  
  85     function power(num : in Integer) return Integer is
  86     result : Integer;
  87     begin
  88        result := Integer'Last;
  89        if num * num < Integer'Last and num * num > Integer'First then
  90          result := num * num;
  91        end if;
  92        return result;
  93     end power;

+++        Flow analysis of subprogram power performed: no 
           errors found.

  94  
  95     function secureAdd(num1 : in Integer; num2 : in Integer) return Integer is
  96     result : Integer;
  97     begin
  98        result := Integer'Last;
  99        if num1 + num2 <= Integer'Last and num1 + num2 >= Integer'First then
 100          result := num1 + num2;
 101        end if;
 102        return result;
 103      end secureAdd;

+++        Flow analysis of subprogram secureAdd performed: 
           no errors found.

 104  
 105     procedure CalculateVariance(Computer : in out ICDType) is
 106     begin
 107  
 108        ---Calculate Variance--------------------
 109  
 110        Computer.history_variance := 0;
 111        if (Computer.history_avarage - Computer.heartRateHistory1) <= Integer'Last and
 112        (Computer.history_avarage - Computer.heartRateHistory1) >= Integer'First and
 113        (Computer.history_avarage - Computer.heartRateHistory2) <= Integer'Last and
 114        (Computer.history_avarage - Computer.heartRateHistory2) >= Integer'First and
 115        (Computer.history_avarage - Computer.heartRateHistory3) <= Integer'Last and
 116        (Computer.history_avarage - Computer.heartRateHistory3) >= Integer'First and
 117        (Computer.history_avarage - Computer.heartRateHistory4) <= Integer'Last and
 118        (Computer.history_avarage - Computer.heartRateHistory4) >= Integer'First and
 119        (Computer.history_avarage - Computer.heartRateHistory5) <= Integer'Last and
 120        (Computer.history_avarage - Computer.heartRateHistory5) >= Integer'First and
 121        (Computer.history_avarage - Computer.heartRateHistory6) <= Integer'Last and
 122        (Computer.history_avarage - Computer.heartRateHistory6) >= Integer'First then
 123  
 124        Computer.history_variance := (secureAdd(secureAdd(secureAdd(secureAdd(secureAdd(power(Computer.history_avarage - Computer.heartRateHistory1), 
 125        power(Computer.history_avarage - Computer.heartRateHistory2)), 
 126        power(Computer.history_avarage - Computer.heartRateHistory3)), 
 127        power(Computer.history_avarage - Computer.heartRateHistory4)), 
 128        power(Computer.history_avarage - Computer.heartRateHistory5)), 
 129        power(Computer.history_avarage - Computer.heartRateHistory6))) / 6;
 130        end if;
 131        ---End Calculating the variance----------
 132     end CalculateVariance;

+++        Flow analysis of subprogram CalculateVariance 
           performed: no errors found.

 133  
 134  
 135     procedure Detect_Fibrillation(Computer : in out ICDType) is
 136     begin
 137  
 138      if Computer.state /= fib 
 139        and Computer.heartRateHistory1 /= Measures.BPM'First
 140        and Computer.history_variance > 100 then
 141          Computer.state := fib;
 142        elsif Computer.state = fib then
 143          Computer.state := normal;
 144        end if;
 145     end Detect_Fibrillation;

+++        Flow analysis of subprogram Detect_Fibrillation 
           performed: no errors found.

 146  
 147    procedure Detect_Tarchycardia(Computer : in out ICDType) is
 148     begin
 149         -- if the icd is on and the rate is above the upperbound
 150         -- and a Tarchycardia has not been detected
 151         -- start a treatment
 152         if Computer.Rate > Computer.UpperBound 
 153         and Computer.state = normal then
 154            Computer.state := tar;
 155            Computer.Count := MaxShocks;
 156          elsif Computer.state = tar and Computer.Count = 0 then
 157            Computer.state := normal;
 158         end if;
 159     end Detect_Tarchycardia;

+++        Flow analysis of subprogram Detect_Tarchycardia 
           performed: no errors found.

 160  
 161     procedure Tick(Computer : in out ICDType; HeartRateMonitor : in HRM.HRMType; Shock : in out ImpulseGenerator.GeneratorType) is
 162     begin
 163  
 164        if Computer.IsOn then
 165              
 166          --Ada.Text_IO.Put_Line("Computer is on");
 167          -- read the heart rate from the HRM
 168          HRM.GetRate(HeartRateMonitor, Computer.Rate);
 169          addRateToHistory(Computer);
 170          CalculateAvarage(Computer);
 171          CalculateVariance(Computer);
 172          Detect_Fibrillation(Computer);
 173          Detect_Tarchycardia(Computer);
 174          Set_Impulse(Computer, Shock);
 175          if Computer.state = tar and Computer.TickCount > Integer'First then
 176            Computer.TickCount := Computer.TickCount - 1;
 177          end if;
 178        end if;
 179     end Tick;

+++        Flow analysis of subprogram Tick performed: no 
           errors found.

 180  
 181  end ICD;
No summarized warnings



--End of file--------------------------------------------------
